import json
from unittest.mock import patch, MagicMock
from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from {{cookiecutter.project_slug}}.users.models import User
from {{cookiecutter.project_slug}}.users.oauth2 import FacebookOAuth2, OAuthException


class TestFacebookLoginSignup(TestCase):
    """
      This test suite tests the login and signup process
    for the social login (Facebook)
       Following are the behaviour:
       * a new or existing user login in with the system
       via facebook oauth2
       * the authorization code is recived and the user
       email information is retrived by the system
       * if the user doesn't exist then a new user entry
       is created in the system
       * if the user already exist then the access token
       is updated in the system.
       * A security token is also generated by the system
       along with user entry
    """

    @patch.object(FacebookOAuth2, "get_info")
    @patch.object(FacebookOAuth2, "exchange")
    def test_succesfull_facebook_oauth_login(self, exchange_mock, info_mock):
        """A very successfull google oauth login
        requires two step
           * exchange of `authorization_code` with
             `access_token`.
           * getting user profile information
             from the `resource_provider`.
        """

        exchange_mock.return_value = {}
        # exchange_mock.return_value = {
        #     "access_token": "EAAhtUCJyYEQBAF1LW50mbKM3wE0dbIGFzuk6GkOLF0UjcEfZCModhTa66uRLOrH5PZAZBTqYsfriAS6SqdEVvYBZAdInJ0vfos57pOeksWVq7eqWZBZCLBZC8iCZBhmW0quF1nwCs1bdqQGwdwZAqELZABEW6NJO4gzX55kck5Xx1SLQZDZD",
        #     "token_type": "bearer",
        #     "expires_in": 5177328,
        # }

        info_mock.return_value = {
            "id": "2355311441224861",
            "name": "Sathya Narrayanan",
            "email": "plasmashadowx@gmail.com",
            "picture": {
                "data": {
                    "height": 50,
                    "is_silhouette": False,
                    "url": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=2355311441224861&height=50&width=50&ext=1565604286&hash=AeSYjd4tqq4cflwR",
                    "width": 50,
                }
            },
        }

        response = self.client.post(
            reverse("api:users:social_auth_facebook"),
            data={"access_token": "abcdedf"},
        )

        content = response.json()
        self.assertEquals(response.status_code, status.HTTP_200_OK)
        self.assertEquals(content["email"], "plasmashadowx@gmail.com")
        self.assertEquals(content["name"], "SathyaNarrayanan")

        user = User.objects.get(email="plasmashadowx@gmail.com")
        self.assertIsNotNone(user)
        self.assertEquals(user.provider, "FACEBOOK")

    # @patch.object(FacebookOAuth2, "exchange")
    # def test_facebook_login_on_code_exchange_failue(self, exchange_mock):

    #     exchange_mock.side_effect = OAuthException("Grant Failed!!")

    #     response = self.client.post(
    #         reverse("api:users:social_auth_facebook"), data={"access_token": "abcdedf"}
    #     )

    #     content = response.json()

    #     self.assertEquals(
    #         response.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR
    #     )

    #     self.assertDictEqual({"error": "Grant Failed!!"}, content)

    @patch.object(FacebookOAuth2, "get_info")
    @patch.object(FacebookOAuth2, "exchange")
    def test_facebook_login_info_failure(self, exchange_mock, info_mock):

        exchange_mock.return_value = {}
        # exchange_mock.return_value = {
        #     "access_token": "EAAhtUCJyYEQBAF1LW50mbKM3wE0dbIGFzuk6GkOLF0UjcEfZCModhTa66uRLOrH5PZAZBTqYsfriAS6SqdEVvYBZAdInJ0vfos57pOeksWVq7eqWZBZCLBZC8iCZBhmW0quF1nwCs1bdqQGwdwZAqELZABEW6NJO4gzX55kck5Xx1SLQZDZD",
        #     "token_type": "bearer",
        #     "expires_in": 5177328,
        # }

        info_mock.side_effect = OAuthException("Invalid fetch!!")

        response = self.client.post(
            reverse("api:users:social_auth_facebook"),
            data={"access_token": "abcdedf"},
        )

        self.assertEquals(
            response.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR
        )

        content = response.json()
        self.assertDictEqual({"error": "Invalid fetch!!"}, content)
